import sys, os
try:
    import gmsh
except ImportError:
    pass

def generate(mesh,id_name_out=None,max_elm_size=None,mesher_id=1):
    """
    Input: 
        trimesh surface mesh 
    Output: 
        3D Volume Mesh generated by Gmsh
    Dependency:
        pip install gmsh-sdk
    Parameters:
        mesh: trimesh class
        id_name_out: string
                     file name of volume mesh
                     Formats *.bdf (Nastran) and *.msh (Gmsh) are supported
        Max_elm_size: float
                      Maximum Characteristic Length of the elements        
        mesher_id: int
                   3D unstructured algorithms:
                    	1: Delaunay, 4: Frontal, 7: MMG3D, 10: HXT
        The “Delaunay” algorithm is split into three separate steps. 
            First, an initial mesh of the union of all the volumes in the model is performed, 
            without inserting points in the volume. The surface mesh is then recovered using H.
            Si’s boundary recovery algorithm Tetgen/BR. Then a three-dimensional version of the
            2D Delaunay algorithm described above is applied to insert points in the volume to 
            respect the mesh size constraints.
        The “Frontal” algorithm uses J. Schoeberl’s Netgen algorithm.
        The “HXT” algorithm is a new efficient and parallel reimplementaton of the Delaunay algorithm.
        The “MMG3D” algorithm (experimental) allows to generate anisotropic tetrahedralizations
    For Futher details consult Gmsh Reference Manual
    """

    #checks mesher selection
    if mesher_id not in [1,4,7,9,10]:
        mesher_id=1
        print("Incorrect Selection of Mesher. 1 was selected by default.")
    else:
        mesher_id=int(mesher_id)

    # Lengh edge
    if max_elm_size==None:
        max_elm_size=np.sqrt(np.mean(mesh.area_faces))

    #Exports to disk for gmsh to read using a temp file
    with tempfile.NamedTemporaryFile(suffix='.stl') as id_name_in:
        pass
    mesh.export(id_name_in.name)

    #starts Gmsh Python API script
    gmsh.initialize(sys.argv)
    gmsh.option.setNumber("General.Terminal", 1)
    gmsh.model.add('Nastran_stl')

    gmsh.merge(id_name_in.name)
    dimtag = gmsh.model.getEntities()[0]
    dim=dimtag[0]
    tag=dimtag[1]

    surf_loop=gmsh.model.geo.addSurfaceLoop([tag])
    gmsh.model.geo.addVolume([surf_loop])
    gmsh.model.geo.synchronize()

    # We can then generate a 3D mesh...
    gmsh.option.setNumber("Mesh.Algorithm3D",mesher_id)
    gmsh.option.setNumber("Mesh.CharacteristicLengthMax", max_elm_size)
    gmsh.model.mesh.generate(3)

    dimtag2 = gmsh.model.getEntities()[1]
    dim2=dimtag2[0]
    tag2=dimtag2[1]
    p2 = gmsh.model.addPhysicalGroup(dim2, [tag2])
    gmsh.model.setPhysicalName(dim, p2, 'Nastran_bdf')

    if id_name_out != None:
        gmsh.write(id_name_out)
        
    gmsh.finalize()
