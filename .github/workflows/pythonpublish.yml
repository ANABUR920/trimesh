name: Test And Publish

on:
  push:
    branches:
      - actions
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
    - name: Test minimal numpy-only install
      run: |
        pip install pytest
        pytest
    - name: Test easy install with pytest
      run: |
        pip install .[easy]
        pytest

  pypi:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*

  containers:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Login to Docker Hub
      run: docker login -u ${{ secrets.DH_USER }} -p ${{ secrets.DH_PASS }}
    - name: Checkout trimesh
      uses: actions/checkout@v2
    - name: Build, tag, and push to DockerHub and AWS ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        GIT_SHA: ${{ github.sha }}
      run: |
        # get the version of trimesh with python
        export VERSION=$(python -c "exec(open('trimesh/version.py','r').read()); print(__version__)")
        # tag the image with the short git sha
        export GIT_SHORT=${GIT_SHA::7}
	# put a whole bunch of tags on image:
        # tag with version, git sha, and latest
        # push to DockerHub and AWS ECR
        export TAGS="mikedh/trimesh:latest; mikedh/trimesh:$VERSION; mikedh/trimesh:$GIT_SHORT; trimesh/trimesh:latest; trimesh/trimesh:$VERSION; trimesh/trimesh:$GIT_SHORT; $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION; $ECR_REGISTRY/$ECR_REPOSITORY:latest; $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHORT"
        # build image tagged with all our many tags
        docker build -t echo "${TAGS//;/$' -t '}" .
        # push every tag to remote registry
        for i in ${TAGS//;/ }; do docker push $i; done;
    - name: Logout of registries
      if: always()
      run: |
        docker logout ${{ steps.login-ecr.outputs.registry }}
        docker logout
