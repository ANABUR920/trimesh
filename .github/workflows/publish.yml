name: Publish Trimesh

on:
  push:
    branches:
      - master

jobs:
  pypi:
    needs: tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
  docs:
    needs: containers
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Docs
      run: |
         docker pull mikedh/trimesh:latest
         docker run -it --rm -v `pwd`:/trimesh mikedh/trimesh:latest python /trimesh/docs/build.py
    - name: Tag Version
      id: set_tag
      run: |
        export VERSION=$(python -c "exec(open('trimesh/version.py','r').read()); print(__version__)")
        echo "::set-output name=tag_name::${VERSION}"
    - name: Deploy To Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        tag_name: ${{ steps.set_tag.outputs.tag_name }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html
  containers:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Login to Docker Hub
      run: echo ${{ secrets.DH_PASS }} | docker login --username mikedh --password-stdin
    - name: Checkout trimesh
      uses: actions/checkout@v2
    - name: Build/Push to DockerHub and AWS ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        GIT_SHA: ${{ github.sha }}
      run: |
        # get the version of trimesh with python
        export VERSION=$(python -c "exec(open('trimesh/version.py','r').read()); print(__version__)")
        # tag the image with the short git sha
        export GIT_SHORT=${GIT_SHA::7}
        # put a whole bunch of tags on image:
        # tag with version, git sha, and latest
        # push to DockerHub and AWS ECR
        export TAGS="trimesh/trimesh:latest; trimesh/trimesh:$VERSION; trimesh/trimesh:$GIT_SHORT; $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION; $ECR_REGISTRY/$ECR_REPOSITORY:latest; $ECR_REGISTRY/$ECR_REPOSITORY:$GIT_SHORT"
        # build image tagged with all our many tags
        docker build -t `echo "${TAGS//;/$' -t '}"` .
        # push every tag to remote registry
        for i in ${TAGS//;/ }; do docker push $i; done;
    - name: Logout of registries
      if: always()
      run: |
        docker logout ${{ steps.login-ecr.outputs.registry }}
        docker logout